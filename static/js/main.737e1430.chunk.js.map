{"version":3,"sources":["components/TopNav.js","components/pages/ChartPage.js","components/pages/MapPage.js","components/pages/HomePage.js","components/Routes.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TopNav","state","collapse","active","onClick","setState","setActive","newActiveState","toggle","dropdownOpen","color","className","dark","expand","scrolling","href","this","isOpen","navbar","left","to","Component","options","title","text","series","type","data","timeSeriesJson","ChartPage","highcharts","Highcharts","mapStyles","height","width","MapPage","showInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","showingInfoWindow","onClose","renderMarkers","locationsJson","map","locations","index","key","id","position","lat","lng","lon","name","style","google","zoom","initialCenter","visible","GoogleApiWrapper","apiKey","HomePage","Routes","path","exact","component","React","Footer","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.737e1430.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink } from 'mdbreact';\r\n\r\nclass TopNav extends Component {\r\n    state = {\r\n        collapse: false,\r\n        active: \"home\"\r\n    }\r\n\r\n    onClick = () => {\r\n        this.setState({\r\n            collapse: !this.state.collapse,\r\n        });\r\n    }\r\n\r\n    setActive = (newActiveState) => {\r\n        this.setState({\r\n            active: newActiveState\r\n        })\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            dropdownOpen: !this.state.dropdownOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MDBNavbar color=\"grey\" className=\"flexible-navbar darken-2\" dark expand=\"md\" scrolling>\r\n                <MDBNavbarBrand href=\"/google-maps-high-charts\">\r\n                    <strong>Google Maps High Charts</strong>\r\n                </MDBNavbarBrand>\r\n                <MDBNavbarToggler onClick={this.onClick} />\r\n                <MDBCollapse isOpen={this.state.collapse} navbar>\r\n                    <MDBNavbarNav left>\r\n                        <MDBNavItem active={this.state.active === \"home\"}>\r\n                            <MDBNavLink to=\"/google-maps-high-charts\" onClick={() => this.setActive(\"home\")}>Home</MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem active={this.state.active === \"map\"}>\r\n                            <MDBNavLink to=\"/google-maps-high-charts/map\" onClick={() => this.setActive(\"map\")}>Map</MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem active={this.state.active === \"chart\"}>\r\n                            <MDBNavLink to=\"/google-maps-high-charts/chart\" onClick={() => this.setActive(\"chart\")}>Chart</MDBNavLink>\r\n                        </MDBNavItem>\r\n                    </MDBNavbarNav>\r\n                </MDBCollapse>\r\n            </MDBNavbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopNav;","import React, { Component } from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport timeSeriesJson from '../utils/timeseries.json';\r\n\r\nconst options = {\r\n  title: {\r\n    text: 'Time Series Chart'\r\n  },\r\n  series: [{\r\n    type: 'line',\r\n    data: timeSeriesJson\r\n  },\r\n  {\r\n    type: 'column',\r\n    data: timeSeriesJson\r\n  }]\r\n}\r\n\r\nclass ChartPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Chart</h2>\r\n        <p>Below is a line and bar chart showing the time series data provided from “timeseries.json” file.</p>\r\n        <br />\r\n        <HighchartsReact\r\n          highcharts={Highcharts}\r\n          options={options}\r\n        />\r\n        <br />\r\n        <p>Created using High Charts API.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartPage;","import React, { Component } from 'react'\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\r\nimport locationsJson from '../utils/location.json';\r\n\r\nconst mapStyles = { height: '50vh', width: '50%' }\r\n\r\nclass MapPage extends Component {\r\n\r\n  state = {\r\n    showInfoWindow: false,\r\n    activeMarker: {},\r\n    selectedPlace: {}\r\n  }\r\n\r\n  onMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n\r\n  renderMarkers = () => {\r\n    return locationsJson.map((locations, index) => {\r\n      return <Marker key={index} id={index} position={{\r\n        lat: locations.lat,\r\n        lng: locations.lon\r\n      }}\r\n        name={`Latitude: ${locations.lat}, Longtitude: ${locations.lon}`}\r\n        onClick={this.onMarkerClick}\r\n      />\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h2>Map</h2>\r\n        <p>Below is a map with location markers and its geolocation information provided from “location.json” file.<br />\r\n          Click on each marker for its geolocation information.\r\n        </p>\r\n        <br />\r\n        <div style={{ height: '50vh', width: '50%' }}>\r\n          <Map\r\n            google={this.props.google}\r\n            zoom={14}\r\n            style={mapStyles}\r\n            initialCenter={{ lat: -28.017591, lng: 153.432395 }}\r\n          >\r\n            {this.renderMarkers()}\r\n            <InfoWindow\r\n              marker={this.state.activeMarker}\r\n              visible={this.state.showingInfoWindow}\r\n              onClose={this.onClose}\r\n            >\r\n              <div>\r\n                <h4>{this.state.selectedPlace.name}</h4>\r\n              </div>\r\n            </InfoWindow>\r\n          </Map>\r\n        </div>\r\n        <br />\r\n        <p>Created using Google Maps API.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"INSERT API KEY HERE\"\r\n})(MapPage);","import React, { Component } from 'react'\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Welcome!</h2>\r\n        <p>This is a simple application using React framework.</p>\r\n        <p>Navigate using Top Navigation bar.</p>\r\n        <ul>\r\n          <li>Map: To view a map with location markers and its geolocation information provided from “location.json” file.</li>\r\n          <li>Chart: To view time series data points provided from “timeseries.json” file.</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom'; //, Redirect\r\nimport ChartPage from './pages/ChartPage';\r\nimport MapPage from './pages/MapPage';\r\nimport HomePage from './pages/HomePage';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* <Redirect from='/' to='/google-maps-high-charts' /> */}\r\n        <Switch>\r\n          <Route path='/google-maps-high-charts' exact component={HomePage} />\r\n          <Route path='/google-maps-high-charts/map' component={MapPage} />\r\n          <Route path='/google-maps-high-charts/chart' component={ChartPage} />\r\n        </Switch>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { MDBFooter } from 'mdbreact';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <MDBFooter color=\"grey\" className=\"text-center font-small\">\r\n            <p className=\"footer-copyright mb-0 py-3 text-center\">\r\n                &copy; {new Date().getFullYear()} Copyright: Afiqah Rashid\r\n            </p>\r\n        </MDBFooter>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport './App.css';\r\nimport TopNav from './components/TopNav';\r\nimport Routes from './components/Routes';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"flexible-content\">\r\n          <TopNav />\r\n          <main id=\"content\" className=\"p-5\">\r\n            <Routes />\r\n          </main>\r\n          <Footer />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}